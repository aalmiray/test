name: EarlyAccess

on:
  push:
    branches: [ main ]

env:
  JAVA_VERSION: '11'
  JAVA_DISTRO: 'zulu'

jobs:
  precheck:
    name: Precheck
    if: github.repository == 'jreleaser/jreleaser' && startsWith(github.event.head_commit.message, 'Releasing version') != true
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Version
        id: vars
        shell: bash
        run: |
          echo ::set-output name=VERSION::$(cat VERSION)

  jlink:
    name: Jlink
    needs: precheck
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew -Prelease=true build -S

      - name: Jlink
        uses: jreleaser/release-action@v1
        with:
          version: early-access
          arguments: assemble -s jlink
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-jlink
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: artifacts
          path: |
            apps/jreleaser/build/libs/
            apps/jreleaser/build/dependencies/
            apps/jreleaser/build/distributions/
            apps/jreleaser-tool-provider/build/libs/*.jar
            plugins/jreleaser-ant-tasks/build/distributions/*.zip

      - name: Upload jlink
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: jlink
          path: |
            out/jreleaser/assemble/jreleaser-standalone/jlink/

  jpackage:
    name: 'JPackage on ${{ matrix.os }}'
    needs: [precheck, jlink]
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: Download jlink
        uses: actions/download-artifact@v2
        with:
          name: jlink
          path: out/jreleaser/assemble/jreleaser-standalone/jlink

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew :jreleaser:copyJdksFromCache :jreleaser:setupJdks

      - name: Jpackage
        uses: jreleaser/release-action@v1
        with:
          version: early-access
          arguments: assemble -s jpackage -scp
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-jpackage-${{ runner.os }}
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: Upload jpackage
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: jpackage
          path: |
            out/jreleaser/assemble/jreleaser-installer/jpackage/*.pkg
            out/jreleaser/assemble/jreleaser-installer/jpackage/*.msi
            out/jreleaser/assemble/jreleaser-installer/jpackage/*.exe
            out/jreleaser/assemble/jreleaser-installer/jpackage/*.deb
            out/jreleaser/assemble/jreleaser-installer/jpackage/*.rpm

  native-image:
    name: 'NativeImage on ${{ matrix.os }}'
    needs: [precheck, jlink]
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: Download jlink
        uses: actions/download-artifact@v2
        with:
          name: jlink
          path: out/jreleaser/assemble/jreleaser-standalone/jlink

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew :jreleaser:copyJdksFromCache :jreleaser:setupJdks

      - name: Install upx
        run: brew install upx
        if: ${{ runner.os == 'macOS' }}

      - name: NativeImage
        uses: jreleaser/release-action@v1
        with:
          version: early-access
          arguments: assemble -s native-image -scp
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-native-image-${{ runner.os }}
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: Upload native-image
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: native-image
          path: |
            out/jreleaser/assemble/jreleaser-native/native-image/*.zip

  release:
    name: Release
    needs: [precheck, jlink, jpackage, native-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: Download jlink
        uses: actions/download-artifact@v2
        with:
          name: jlink
          path: out/jreleaser/assemble/jreleaser-standalone/jlink

      - name: Download jpackage
        uses: actions/download-artifact@v2
        with:
          name: jpackage
          path: out/jreleaser/assemble/jreleaser-installer/jpackage

      - name: Download native-image
        uses: actions/download-artifact@v2
        with:
          name: jpackage
          path: out/jreleaser/assemble/jreleaser-native/native-image

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Release
        uses: jreleaser/release-action@v1
        with:
          version: early-access
          arguments: full-release
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          #JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
